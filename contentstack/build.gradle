plugins {
    id "com.vanniktech.maven.publish" version "0.27.0"
    id "com.android.library"
}

import com.vanniktech.maven.publish.SonatypeHost

android.buildFeatures.buildConfig true

mavenPublishing {
    publishToMavenCentral(SonatypeHost.DEFAULT)
    signAllPublications()
    coordinates("com.contentstack.sdk", "android", "4.0.0")

    pom {
        name = "contentstack-android"
        description = "The Content Delivery SDK facilitates the retrieval of content from your Contentstack account, enabling seamless delivery to your web or mobile properties.."
        inceptionYear = "2018"
        packaging 'aar'
        url = "https://github.com/contentstack/contentstack-android"
        licenses {
            license {
                name = "The MIT License"
                url = "https://github.com/contentstack/contentstack-android/blob/master/LICENSE"
                distribution = "https://github.com/contentstack/contentstack-android/blob/master/LICENSE"
            }
        }
        developers {
            developer {
                id = "ishaileshmishra"
                name = "contentstack"
                url = "https://github.com/contentstack/contentstack-android"
            }
        }
        scm {
            url = "scm:git@github.com:contentstack/contentstack-android"
            connection = "scm:git:git://github.com/contentstack/contentstack-android.git"
            developerConnection = "scm:git@github.com:contentstack/contentstack-android.git"
        }
    }
}


tasks.register('jacocoTestReport', JacocoReport) {
    dependsOn['testDebugUnitTest', 'createDebugCoverageReport']
    reports {
        html.enabled = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: '**com/contentstack/okhttp**')
            fileTree(dir: it, exclude: '**com/contentstack/okio**')
            fileTree(dir: it, exclude: '**com/contentstack/txtmark**')
        }))
    }
}

android {
    //namespace "com.contentstack.sdk"
    packagingOptions {
        exclude("META-INF/DEPENDENCIES")
        exclude("META-INF/LICENSE")
        exclude("META-INF/LICENSE.txt")
        exclude("META-INF/license.txt")
        exclude("META-INF/NOTICE")
        exclude("META-INF/NOTICE.txt")
        exclude("META-INF/notice.txt")
        exclude("META-INF/ASL2.0")
        exclude("META-INF/*.kotlin_module")
        exclude("META-INF/LICENSE.md")
        exclude("META-INF/LICENSE-notice.md")
    }

    testOptions {
        unitTests.all {
            // jacoco {
            //     includeNoLocationClasses = true
            // }
        }
    }
    // signing {
    //     // Specify key and other signing details
    //     useGpgCmd()
    //     sign configurations.archives
    // }
    signingConfigs {
        debug {
            storeFile file("../key.keystore")
            storePassword 'android'
            keyAlias 'key0'
            keyPassword 'android'
        }
        release {
            storeFile file("../key.keystore")
            storePassword 'android'
            keyAlias 'key0'
            keyPassword 'android'
        }
    }
    compileSdk 30
    defaultConfig {
        // Required when setting minSdkVersion to 20 or lower
        multiDexEnabled true
        minSdk 24
        versionCode 1
        versionName "1.0"
        useLibrary 'org.apache.http.legacy'
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        signingConfig signingConfigs.release
    }


    def localProperties = new Properties()
    localProperties.load(new FileInputStream(rootProject.file("local.properties")))
    def getPropertyOrEmpty = { key ->
        def value = localProperties.getProperty(key)
        return value != null ? "$value" : "\"\""
    }
    def variantsArray = localProperties.getProperty('variantsUID')?.split(",")?.collect { it.trim() }
    def variantsAsArrayString = variantsArray ? 'new String[] {' + variantsArray.collect { "\"$it\"" }.join(", ") + '}' : "new String[0]"
    buildTypes {
        debug {
            debuggable true
            testCoverageEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            buildConfigField "String", "host", getPropertyOrEmpty('host')
            buildConfigField "String", "APIKey", getPropertyOrEmpty('APIKey')
            buildConfigField "String", "deliveryToken", getPropertyOrEmpty('deliveryToken')
            buildConfigField "String", "environment", getPropertyOrEmpty('environment')
            buildConfigField "String", "contentTypeUID", getPropertyOrEmpty('contentType')
            buildConfigField "String", "assetUID", getPropertyOrEmpty('assetUid')
            buildConfigField "String", "variantUID", getPropertyOrEmpty('variantUID')
            buildConfigField "String", "variantEntryUID", getPropertyOrEmpty('variantEntryUID')
            buildConfigField "String[]", "variantsUID", variantsAsArrayString
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}
configurations { archives }
dependencies {
    androidTestImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    def multidex = "2.0.1"
    def volley = "1.2.1"
    def junit = "4.13.2"
    configurations.configureEach { resolutionStrategy.force 'com.android.support:support-annotations:23.1.0' }
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "com.android.volley:volley:$volley"
    implementation "junit:junit:$junit"

    // For AGP 7.4+
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:core:1.5.0'
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

//    implementation 'com.squareup.okio:okio:3.9.0'
    implementation 'com.github.rjeschke:txtmark:0.12'
    // // Retrofit
    implementation("com.squareup.retrofit2:retrofit:2.9.0")
    implementation 'com.squareup.retrofit2:converter-gson'
    // // OkHttp
    implementation 'com.squareup.okhttp3:okhttp'
    // implementation 'com.squareup.okhttp3:logging-interceptor:4.9.3'

    constraints {
        implementation('com.squareup.retrofit2:converter-gson:2.9.0') {
            because 'gson 2.8.5 used by retrofit has a vulnerability'
        }
        implementation('com.google.code.gson:gson@2.8.9') {
            because 'gson 2.8.5 used by retrofit has a vulnerability'
        }
        implementation('com.squareup.okhttp3:okhttp:4.9.3') {
            because 'kotlin stdlib 1.4.10 used by okhttp has a vulnerability'
        }
        implementation('org.jetbrains.kotlin:kotlin-stdlib@1.6.0') {
            because 'kotlin stdlib 1.4.10 used by okhttp has a vulnerability'
        }
    }
}
tasks.register('clearJar', Delete) { delete 'build/libs/contentstack.jar' }
tasks.register('unzip', Copy) {
    def zipFile = file('build/intermediates/intermediate-jars/release/classes.jar')
    def outputDir = file("${buildDir}/contentstack-jar")
    from zipTree(zipFile)
    into outputDir
}
tasks.register('createJar', Jar) {
    archivesBaseName = "contentstack.jar"
    from('build/contentstack-jar/')
    include 'com/contentstack/'
    //include 'META-INF/'
}
createJar.dependsOn(clearJar, unzip, build)